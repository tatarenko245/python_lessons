# # Example 1
# def print_number(limit):
#     for i in range(limit):
#         print(i)
#
#
# n = int(input("Enter integer number, please: "))
# print_number(n)
#
#
# # limit - это формальный параметр ( параметр при объявлении функции) также называют просто параметром
# # n - это фактический параметр (параметр при вызове функции) также называют аргументом
# # фактические параметры замещают формальные параметры
# # то есть у нас здесь переменная limit становится как-бы переменной n
# # limit это локальная переменная
# # То, каким образом значение аргумента замещает значение параметра называется стратегией вычисления
#
# # Внимание оператор return завершает выполнение функции
# # Если функция ничего не возвращает, то она по-умолчанию возвращает None
# def add_number(a, b):
#     return a + b
#
#
# number_1 = int(input("a = "))
# number_2 = int(input("b = "))
# result = add_number(number_1, number_2)
# print(result)

# Алгоритм создания функции
# 1. Придумать адекватное имя функции
# 2. Подумать какие параметры должна функция принимать
# 3. Что будет возвращать

# # Example 2 Вызовим функцию
# result = add_number(23,4)
# print(result)

# # Example 3
# def function_1(x):
#     if x > 0:
#         return x**2
#     else:
#         return print("I dont know")
#
# res=function_1(-1)
# print(res)
#
# # Example 4 sep='\t' это символ табуляции (выравнивание)
# def print_info(object_name, color, price):
#     print("Object:", object_name, sep='\t')
#     print("Color:", color, sep='\t')
#     print("Price:", price, sep='\t')
#
# object_1 = print_info(
#     'pen',
#     'red',
#     22)


# # Example 5 Опциональные параметры
# def hello(name="Roman"):
#     print('Hello ', name, '!', sep='')
#
# hello('Petro')

# Документационыые строки, область видимости переменной, встроенные функции, рекурсия
# Любая строка в начале функции играет роль особого вида комментариев - документационной строки docstring К ним можно
# получить доступ во время выполнения программы. Чтобы получить доступ к документационным строкам обращаются к полю doc

# Example 1
def function():
    """Example function
    Функция нужна для вывода на экран
    сообщения что функция запущена. Пишется в тройных кавычках и закрываются тройные кавычки на новой строке
    """
    print("function started")

function()
print(function.__doc__)

# Встроенные стандартные функции
# abs(): модуль числа
# all(): все значения являются например булеан
# any(): хотя-бы одно значение является булеан
# ascii(): похожа на функцию repr, только отдает символы в кодировке ascii
# str(): строковое представление объекта для пользователя
# repr(): строковое представление объекта для внутреннего использования
# bin(): строка в двоичном представлении
# bool(): конвертирует аргумент в булеан значение
# collable(): вызывае какой-либо объект и возвращает Trueесли этот объект функция
# chr(): принимает код символа и возвращает сам символ
# ord():получаем код символа по самому символу
# complex(): получаем комплексное число из строки или из пары действительных чисел
# dir(): берет объект и возвращает список его атрибутов и методов
# divmod(): возвращает пару, где первое число - целое, а второе остаток от деления
# enumerate(): для работы с последовательности. Получаем итератор из пар индекс значение последовательность
# float(): преобразовывает в вещественное число
# format(): форматирование строк
# hash(): вычисляет хеш-сумму
# oct(): возвращает число в 8 системе
# hex():возвращает число в 16 ричной системе
# id(): идентификатор
# input(): ввод с клавиатуры
# int(): бреобразовываем в целое число
# len(): длинна последовательности
# list(): список
# map():
# pow():возвращет число в заданное степени
# round(): округляет до заданного количества знаков после запятой
# sorted(): получаем отсортированную последовательность
# sum():сума чисел в последовательности
# type(): тип объекта
# reversed(): последовательность в обратном порядке
# min(): находим минимальное число
# max(): находим максимальное число


#Замыкание. Вложенные функции в другие функции называеются функциями замыкания
# Область видимости (scope)
# есть глобальные переменные, а есть локальные
# Область видимости локальной переменной является функция
# Чтобы указать что переменная глобальная нужно написать либо global, либо nonlocal

# КАК РАБОТАЕТ ЗАМЫКАНИЕ
def outer_function():
    def inner_function():
        print("Inner function")
    print("Out finction")
    inner_function()
outer_function()
# мы не можем на этом уровне вызвать inner_function


# Рекурсия вызов функции из нее же самой (простая рекурсия) или через другие функции (сложная или косвенная рекурсия =
# например функция А вызывает функцию В, а функция В функцию А). Количество вложенный вызовов функции называется
# глубиной рекурсии. У любой рекусивной функции для того чтобы она могла завершиться должно быть условие выхода
# и рекусивный вызов ( или она не была бы рекусрсивной вообще).

# Яркий пример рекурсии. Вычислим факториал числа.
# Факториал числа - это произведение всех чисел от 1 до заданного натурального числа.
def recursive_factorial(n):
    if n == 0:
        return 1 # Факториал числа 0 - это единица по приянтой договоренности
    else:
        return n * recursive_factorial(n-1)